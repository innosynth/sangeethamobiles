"""database changes from client side

Revision ID: da09d8ab0f9e
Revises: 78bddc1ad1d4
Create Date: 2025-03-26 12:24:41.302426

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = "da09d8ab0f9e"
down_revision: Union[str, None] = "78bddc1ad1d4"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "L2",
        sa.Column("L2_id", sa.String(length=36), nullable=False),
        sa.Column("L2_name", sa.String(length=255), nullable=True),
        sa.Column("user_id", sa.String(length=36), nullable=False),
        sa.Column(
            "status",
            sa.Enum("ACTIVE", "INACTIVE", "PENDING", "FAILURE", name="statusenum"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("modified_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("L2_id"),
    )
    op.create_table(
        "L3",
        sa.Column("L3_id", sa.String(length=36), nullable=False),
        sa.Column("L3_name", sa.String(length=255), nullable=False),
        sa.Column("user_id", sa.String(length=36), nullable=False),
        sa.Column(
            "status",
            sa.Enum("ACTIVE", "INACTIVE", "PENDING", "FAILURE", name="statusenum"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("modified_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("L3_id"),
    )
    op.add_column("user", sa.Column("reports_to", sa.String(length=36), nullable=True))
    op.add_column(
        "user",
        sa.Column(
            "status",
            sa.Enum("ACTIVE", "INACTIVE", "PENDING", "FAILURE", name="statusenum"),
            nullable=False,
        ),
    )
    op.alter_column("user", "created_at", existing_type=mysql.DATETIME(), nullable=True)
    op.alter_column(
        "user", "modified_at", existing_type=mysql.DATETIME(), nullable=True
    )
    op.drop_column("user", "store_id")
    op.drop_column("user", "id")
    op.drop_column("user", "user_status")
    op.drop_column("user", "business_key")
    op.drop_column("user", "user_role")
    op.drop_column("user", "last_login")
    op.drop_column("user", "email")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("user", sa.Column("email", mysql.VARCHAR(length=255), nullable=False))
    op.add_column("user", sa.Column("last_login", mysql.DATETIME(), nullable=True))
    op.add_column(
        "user",
        sa.Column(
            "user_role", mysql.ENUM("L4", "L3", "L2", "L1", "L0"), nullable=False
        ),
    )
    op.add_column(
        "user", sa.Column("business_key", mysql.VARCHAR(length=255), nullable=False)
    )
    op.add_column(
        "user",
        sa.Column(
            "user_status",
            mysql.ENUM("ACTIVE", "INACTIVE", "PENDING", "FAILURE"),
            nullable=False,
        ),
    )
    op.add_column("user", sa.Column("id", mysql.VARCHAR(length=36), nullable=False))
    op.add_column(
        "user", sa.Column("store_id", mysql.VARCHAR(length=36), nullable=False)
    )
    op.alter_column(
        "user", "modified_at", existing_type=mysql.DATETIME(), nullable=False
    )
    op.alter_column(
        "user", "created_at", existing_type=mysql.DATETIME(), nullable=False
    )
    op.drop_column("user", "status")
    op.drop_column("user", "reports_to")
    op.drop_table("L3")
    op.drop_table("L2")
    # ### end Alembic commands ###
